{"version":3,"sources":["pages/Login.js","components/Firebase.js","components/MapComponent.js","components/Nav.js","pages/AppPage.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkLogin","bind","assertThisInitialized","updateUserValue","updatePasswordValue","users","user","password","state","incPass","_this2","forEach","currUser","handler","setState","objectSpread","e","target","value","_this3","react_default","a","createElement","className","mdbreact_esm","md","icon","label","group","type","validate","onChange","color","onClick","Component","app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","database","MapComponent","notes","ref","on","values","val","markers","note","push","dist","key","noteUid","position","lat","latitude","lng","longtitude","google","initialCenter","zoom","getMarkers","GoogleApiWrapper","Nav","logOut","BurgerMenu","react_router_dom","to","class","AppPage","Nav_Nav","components_MapComponent","App","handleLoginClick","handleLogoutClick","isLoggedIn","console","log","AppPage_AppPage","Login_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4415fca3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBIcon,\r\n  MDBCardHeader,\r\n  MDBBtn,\r\n  MDBInput\r\n} from \"mdbreact\";\r\nimport \"../css/login.css\";\r\n\r\nexport default class Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.checkLogin = this.checkLogin.bind(this);\r\n    this.updateUserValue = this.updateUserValue.bind(this);\r\n    this.updatePasswordValue = this.updatePasswordValue.bind(this);\r\n    this.users = [\r\n      { user: \"maor\", password: \"123456\" },\r\n      { user: \"daniel\", password: \"test\" }\r\n    ];\r\n    this.state = {\r\n      user: \"\",\r\n      password: \"\",\r\n      incPass: false\r\n    };\r\n  }\r\n\r\n  checkLogin() {\r\n    this.users.forEach(currUser => {\r\n      if (\r\n        currUser.user === this.state.user &&\r\n        currUser.password === this.state.password\r\n      ) {\r\n        this.props.handler(currUser);\r\n        return;\r\n      }\r\n    });\r\n    this.setState({\r\n      ...this.state,\r\n      incPass: true\r\n    });\r\n  }\r\n\r\n  updateUserValue(e) {\r\n    this.setState({\r\n      ...this.state,\r\n      user: e.target.value\r\n    });\r\n  }\r\n\r\n  updatePasswordValue(e) {\r\n    this.setState({\r\n      ...this.state,\r\n      password: e.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const IncPass = () => {\r\n      if (this.state.incPass) {\r\n        return <p>incorrect user or password!</p>;\r\n      }\r\n      return null;\r\n    };\r\n    return (\r\n      <div className=\"main\">\r\n        <div className=\"wrapper\">\r\n          <MDBContainer>\r\n            <MDBRow>\r\n              <MDBCol md=\"6\" className=\"offset-3\">\r\n                <MDBCard>\r\n                  <MDBCardBody>\r\n                    <MDBCardHeader className=\"form-header purple-gradient rounded\">\r\n                      <h3 className=\"my-3\">\r\n                        <MDBIcon icon=\"lock\" /> Login:\r\n                      </h3>\r\n                    </MDBCardHeader>\r\n                    <form>\r\n                      <div className=\"grey-text\">\r\n                        <MDBInput\r\n                          label=\"Type your user\"\r\n                          icon=\"user\"\r\n                          group\r\n                          type=\"text\"\r\n                          validate\r\n                          onChange={this.updateUserValue}\r\n                        />\r\n                        <MDBInput\r\n                          label=\"Type your password\"\r\n                          icon=\"lock\"\r\n                          group\r\n                          type=\"password\"\r\n                          validate\r\n                          onChange={this.updatePasswordValue}\r\n                        />\r\n                      </div>\r\n                      <IncPass />\r\n                      <div className=\"text-center mt-4\">\r\n                        <MDBBtn\r\n                          color=\"blue\"\r\n                          className=\"mb-3\"\r\n                          onClick={this.checkLogin}\r\n                        >\r\n                          Login\r\n                        </MDBBtn>\r\n                      </div>\r\n                    </form>\r\n                  </MDBCardBody>\r\n                </MDBCard>\r\n              </MDBCol>\r\n            </MDBRow>\r\n          </MDBContainer>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyBWxh5GxPqASlWybg6qk4AXV5SGae9_MeQ\",\r\n  authDomain: \"citypop-76fa9.firebaseapp.com\",\r\n  databaseURL: \"https://citypop-76fa9.firebaseio.com\",\r\n  projectId: \"citypop-76fa9\",\r\n  storageBucket: \"citypop-76fa9.appspot.com\",\r\n  messagingSenderId: \"274394776071\"\r\n};\r\n\r\nexport const app = firebase.initializeApp(config);\r\nexport const db = firebase.database(app);\r\n","import React, { Component } from \"react\";\r\nimport { db } from \"./Firebase\";\r\nimport { Map, Marker, GoogleApiWrapper } from \"google-maps-react\";\r\n\r\nclass MapComponent extends Component {\r\n  state = {\r\n    notes: []\r\n  };\r\n\r\n  componentWillMount() {\r\n    db.ref(\"CityPopSERVER/Notes\").on(\"value\", notes => {\r\n      notes = Object.values(notes.val());\r\n      this.setState({\r\n        ...this.state,\r\n        notes\r\n      });\r\n    });\r\n  }\r\n\r\n  getMarkers() {\r\n    const markers = [];\r\n    this.state.notes.forEach(note => {\r\n      markers.push(\r\n        <Marker\r\n          key={note.noteUid}\r\n          position={{ lat: note.latitude, lng: note.longtitude }}\r\n        />\r\n      );\r\n    });\r\n    return markers;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Map\r\n        google={this.props.google}\r\n        initialCenter={{\r\n          lat: 31.771959,\r\n          lng: 35.217018\r\n        }}\r\n        zoom={8}\r\n      >\r\n        {this.getMarkers()}\r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyBUgpiNkpLGPdN8m43cbNmr9aV_81OZfL0\"\r\n})(MapComponent);\r\n","import React, { Component } from \"react\";\r\nimport \"../css/nav.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { slide as Menu } from \"react-burger-menu\";\r\n\r\nexport default class Nav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.logOut = this.logOut.bind(this);\r\n  }\r\n\r\n  logOut() {\r\n    this.props.handler();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"nav\">\r\n        <Menu>\r\n          <Link to=\"/\" className=\"menu-item\">\r\n            Home\r\n          </Link>\r\n          <Link to=\"/\" className=\"menu-item\">\r\n            About\r\n          </Link>\r\n          <Link to=\"/\" className=\"menu-item\">\r\n            Contact\r\n          </Link>\r\n        </Menu>\r\n        <Link to=\"/\" className=\"brand\">\r\n          CityPop\r\n        </Link>\r\n\r\n        <button className=\"log-out-btn\" onClick={this.logOut}>\r\n          <i class=\"fas fa-sign-out-alt\" /> {\"\"}Sign Out\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\r\nimport MapComponent from \"../components/MapComponent\";\r\nimport Nav from \"../components/Nav\";\r\n\r\nexport default class AppPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <BrowserRouter>\r\n            <div className=\"App\">\r\n              <Nav handler={this.props.handler} />\r\n              <MapComponent />\r\n            </div>\r\n          </BrowserRouter>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./css/App.css\";\nimport Login from \"./pages/Login\";\nimport AppPage from \"./pages/AppPage\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleLoginClick = this.handleLoginClick.bind(this);\n    this.handleLogoutClick = this.handleLogoutClick.bind(this);\n    this.state = { isLoggedIn: false, user: {} };\n  }\n\n  handleLoginClick(user) {\n    this.setState({\n      ...this.state,\n      isLoggedIn: true,\n      user\n    });\n  }\n\n  handleLogoutClick() {\n    this.setState({ ...this.state, isLoggedIn: false });\n    console.log(\"bla\");\n  }\n\n  render() {\n    const isLoggedIn = this.state.isLoggedIn;\n\n    return isLoggedIn ? (\n      <AppPage handler={this.handleLogoutClick} />\n    ) : (\n      <Login handler={this.handleLoginClick} />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}